{"version":3,"sources":["components/movieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","Container","id","Row","Col","xs","Image","width","src","this","props","movie","poster_path","title","className","overview","Component","App","state","movies","console","log","Search","search","event","target","value","searchTerm","axios","get","then","res","data","results","movieRows","forEach","movieR","key","push","setState","Form","FormControl","type","placeholder","onChange","handleSearch","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2VA4BeA,E,iLAtBX,OACE,kBAACC,EAAA,EAAD,CAAWC,GAAG,YACZ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,QACN,kBAACC,EAAA,EAAD,CACEC,MAAM,MACNC,IACE,mCACAC,KAAKC,MAAMC,MAAMC,eAIvB,kBAACR,EAAA,EAAD,KACE,4BAAKK,KAAKC,MAAMC,MAAME,OACtB,uBAAGC,UAAU,iBAAb,IAA+BL,KAAKC,MAAMC,MAAMI,iB,GAhBrCC,aC0ERC,E,YApEb,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KACDQ,MAAQ,CAAEC,OAAQ,IAEvBC,QAAQC,IAAI,EAAKH,MAAMC,QACvB,EAAKG,OAAO,EAAKJ,MAAMK,QALN,E,0EAQNC,GACXJ,QAAQC,IAAIG,EAAMC,OAAOC,OACzB,IAAMH,EAASC,EAAMC,OAAOC,MAC5BjB,KAAKa,OAAOC,K,6BAGPI,GAAa,IAAD,OACjBC,IACGC,IACC,2GACEF,EACA,+BAEHG,MAAK,SAAAC,GACJ,IAAMZ,EAASY,EAAIC,KAAKC,QAEpBC,EAAY,GAEhBf,EAAOgB,SAAQ,SAAAxB,GACb,IAAMyB,EAAS,kBAAC,EAAD,CAAUC,IAAK1B,EAAMT,GAAIS,MAAOA,IAC/CS,QAAQC,IAAIe,EAAO1B,MAAMC,MAAMC,aAEG,KAAhCwB,EAAO1B,MAAMC,MAAMI,UACgB,OAAnCqB,EAAO1B,MAAMC,MAAMC,aAEnBsB,EAAUI,KAAKF,MAGnB,EAAKG,SAAS,CAAEpB,OAAQe,S,+BAK5B,OACE,yBAAKpB,UAAU,OACb,kBAACX,EAAA,EAAD,CAAKD,GAAG,SAASY,UAAU,sBACzB,kBAACV,EAAA,EAAD,CAAKU,UAAU,aAAaT,GAAG,QAC7B,kBAACC,EAAA,EAAD,CAAOE,IAAI,qCAEb,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,8CAGJ,kBAACF,EAAA,EAAD,CAAKD,GAAG,UACN,kBAACE,EAAA,EAAD,KACE,kBAACoC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,SACZC,SAAUnC,KAAKoC,aAAaC,KAAKrC,WAKxCA,KAAKS,MAAMC,Y,GA/DFH,aCGE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.19f5456b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport { Row, Container, Col, Image } from \"react-bootstrap\";\r\n\r\nclass MovieRow extends Component {\r\n  render() {\r\n    return (\r\n      <Container id=\"movieRow\">\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <Image\r\n              width=\"100\"\r\n              src={\r\n                \"https://image.tmdb.org/t/p/w200/\" +\r\n                this.props.movie.poster_path\r\n              }\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <h3>{this.props.movie.title}</h3>\r\n            <p className=\"text-overflow\"> {this.props.movie.overview}</p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieRow;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\n\nimport { Row, Col, Image, Form, FormControl } from \"react-bootstrap\";\n\nimport MovieRow from \"./components/movieRow\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { movies: [] };\n\n    console.log(this.state.movies);\n    this.Search(this.state.search);\n  }\n\n  handleSearch(event) {\n    console.log(event.target.value);\n    const search = event.target.value;\n    this.Search(search);\n  }\n\n  Search(searchTerm) {\n    axios\n      .get(\n        \"https://api.themoviedb.org/3/search/movie?api_key=29408d281b8290ab79293fd3f9c29a82&language=en-US&query=\" +\n          searchTerm +\n          \"&page=1&include_adult=false\"\n      )\n      .then(res => {\n        const movies = res.data.results;\n\n        var movieRows = [];\n\n        movies.forEach(movie => {\n          const movieR = <MovieRow key={movie.id} movie={movie} />;\n          console.log(movieR.props.movie.poster_path);\n          if (\n            movieR.props.movie.overview !== \"\" &&\n            movieR.props.movie.poster_path !== null\n          )\n            movieRows.push(movieR);\n        });\n\n        this.setState({ movies: movieRows });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Row id=\"header\" className=\"align-items-center\">\n          <Col className=\"no-padding\" xs=\"auto\">\n            <Image src=\"https://via.placeholder.com/100\"></Image>\n          </Col>\n          <Col xs={8}>\n            <h1>Movie Search</h1>\n          </Col>\n        </Row>\n        <Row id=\"search\">\n          <Col>\n            <Form>\n              <FormControl\n                type=\"text\"\n                placeholder=\"Search\"\n                onChange={this.handleSearch.bind(this)}\n              ></FormControl>\n            </Form>\n          </Col>\n        </Row>\n        {this.state.movies}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}